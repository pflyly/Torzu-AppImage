name: Build Torzu
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  torzu_appimage:
    name: Torzu AppImage
    runs-on: ubuntu-latest
    container: ghcr.io/pkgforge-dev/archlinux:latest
    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      if: always()
      run: |
        sed -i 's/DownloadUser/#DownloadUser/g' /etc/pacman.conf
        pacman -Syu --noconfirm base-devel strace patchelf curl wget \
          desktop-file-utils git llvm mesa xorg-server-xvfb \
          vulkan-radeon vulkan-intel vulkan-nouveau pulseaudio pulseaudio-alsa pipewire 
        pacman-key --init && pacman-key --populate archlinux
        sudo pacman -Syu --noconfirm \
          zsync \
          catch2 \
          enet \
          gamemode \
          cmake \
          gcc \
          gcc-libs \
          glslang \
          glu \
          hidapi \
          xcb-util-wm \
          xcb-util-image \
          xcb-util-renderutil \
          libxkbcommon-x11 \
          libxi \
          nasm \
          qt5-base \
          qt5-tools \
          qt5-webengine \
          qt5-multimedia \
          qt5-wayland \
          qt6-base \
          qt6-multimedia \
          qt6-wayland \
          qt6-tools \
          qt6ct \
          gst-plugins-base \
          gst-plugins-good \
          gst-plugins-bad \
          gst-plugins-ugly \
          mbedtls2 \
          fmt \
          nlohmann-json \
          aom \
          libass \
          haskell-gnutls \
          sdl2 \
          libva \
          meson \
          ninja \
          x264 \
          x265 \
          numactl \
          libvpx \
          libfdk-aac \
          libopusenc \
          ffmpeg \
          svt-av1 \
          dav1d \
          boost \
          clang \
          vulkan-headers \
          ffmpeg4.4 \
          zip \
          unzip \
          boost-libs \
          qt5ct
   
    - name: Install debloated dependencies
      run: |
        chmod +x ./get-dependencies.sh && ./get-dependencies.sh

    - name: Compile Torzu Optimized
      run: |
        chmod +x ./torzu-appimage.sh && ./torzu-appimage.sh
        mkdir -p dist
        mv *.AppImage* dist/

    - name: Check version file
      run: |
       cat ~/version
       echo "APP_VERSION=$(cat ~/version)" >> "${GITHUB_ENV}"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4.6.2
      with:
        name: Torzu-AppImage
        path: 'dist'
        
    - name: Upload version file
      uses: actions/upload-artifact@v4.6.2
      with:
       name: version
       path: ~/version
       
  torzu_android: 
    runs-on: ubuntu-latest
    name: "Torzu nightly (android)"
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install ccache apksigner glslang-tools libvulkan-dev -y
          
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false
        
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        
      - name: Accept Android SDK Licenses
        run:  |
          yes | sdkmanager --licenses
          sdkmanager "ndk;26.3.11579264" "cmake;3.22.1"

      - name: Compile Torzu android
        run: |
          chmod +x ./torzu-android.sh
          ./torzu-android.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: Torzu-android-universal
          path: torzu/src/android/artifacts/

  torzu_windows:
    name: Torzu Windows (${{ matrix.target }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: ["msvc", "msys2"]
    defaults:
        run:
          shell: ${{ (matrix.target == 'msys2' && 'msys2 {0}') || 'bash' }}
    env:
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
            
      - name: Set up MSVC
        if: ${{ matrix.target == 'msvc' }}
        uses: ilammy/msvc-dev-cmd@v1
       
      - name: Install extra tools (MSVC)
        if: ${{ matrix.target == 'msvc' }}
        run: choco install cmake ninja wget zip -y
        
      - name: Install Qt (MSVC)
        if: ${{ matrix.target == 'msvc' }}
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.3'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_msvc2022_64'
          cache: 'true'
        
      - name: Install vulkan-sdk (MSVC)
        if: ${{ matrix.target == 'msvc' }}
        run: |
           wget https://sdk.lunarg.com/sdk/download/1.4.309.0/windows/VulkanSDK-1.4.309.0-Installer.exe -O D:/a/_temp/vulkan.exe
           D:/a/_temp/vulkan.exe --accept-licenses --default-answer --confirm-command install
           echo "VULKAN_SDK=C:/VulkanSDK/1.4.309.0" >> $GITHUB_ENV
           echo "PATH=C:/VulkanSDK/1.4.309.0/Bin:$PATH" >> $GITHUB_ENV
        
      - name: Set up vcpkg
        id: vcpkg
        uses: johnwason/vcpkg-action@v6
        with:
          cache-key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
          manifest-dir: ${{ github.workspace }}
          triplet: x64-windows-release
          github-binarycache: true
          token: ${{ github.token }}
          
      - name: Set up MSYS2
        if: ${{ matrix.target == 'msys2' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: false
          install: git make p7zip autoconf libtool autoconf-archive base-devel zip unzip automake-wrapper automake
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p spirv-tools:p glslang:p libzip:p lz4:p
            qt6:p boost:p nlohmann_json:p openssl:p ffmpeg:p fmt:p mbedtls:p 
            opus:p qt5:p zlib:p zstd:p sdl3:p rapidjson:p python-pip:p
          
      - name: Disable line ending translation
        run: git config --global core.autocrlf input
        
      - name: Compile Torzu ${{ matrix.target }}
        run: |
          chmod +x ./torzu-windows.sh
          ./torzu-windows.sh ${{ matrix.target }}
          
      - name: Upload
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Torzu-${{ env.OS }}-${{ matrix.target }}
          path: torzu/build/artifacts/
          
  release:
      name: "release"
      if: ${{ github.ref_name == 'main' }}
      needs: [torzu_appimage, torzu_android, torzu_windows]
      permissions: write-all
      runs-on: ubuntu-latest

      steps:
        - uses: actions/download-artifact@v4.1.9
          with:
            name: Torzu-AppImage
            
        - uses: actions/download-artifact@v4.1.9
        
          with:
            name: Torzu-android-universal
            
        - uses: actions/download-artifact@v4.3.0
          with:
            name: Torzu-windows-msvc
            
        - uses: actions/download-artifact@v4.3.0
          with:
            name: Torzu-windows-msys2
            
        - uses: actions/download-artifact@v4.3.0
          with:
            name: version

        - name: Read version
          run: |
            cat version
            export VERSION="$(<version)"
            echo "APP_VERSION=${VERSION}" >> "${GITHUB_ENV}"
            echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_ENV"            

        - name: Delete same tag release
          run: |
            gh release delete "Torzu-${{ env.date }}-${{ env.APP_VERSION }}" --repo "${GITHUB_REPOSITORY}" --cleanup-tag  -y
            sleep 5
          env:
            GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          continue-on-error: true               

        - name: Nightly Releaser
          uses: softprops/action-gh-release@v2
          with:
            name: "Torzu Nightly: ${{ env.APP_VERSION }}"
            tag_name: "Torzu-${{ env.date }}-${{ env.APP_VERSION }}"
            prerelease: false
            draft: false
            generate_release_notes: false
            make_latest: true
            files: |
              *.AppImage*, *.zip, *.apk
          continue-on-error: false
